
 Git Part 4 â€“ Cheat Sheet

 1. Git Configuration

Set username â†’ `git config --global user.name "Your Name"`
Set email â†’ `git config --global user.email "your@email.com"`
Check config â†’ `git config --list`

---

2. Git Lifecycle Basics

Check status â†’ `git status`
Add file to staging â†’ `git add file.txt`
Add all files â†’ `git add .`
Commit changes â†’ `git commit -m "Commit message"`
Skip staging (direct commit) â†’ Not allowed. Files must go through staging area first.

---

3. File Operations

Restore deleted/modified file

  If deleted but not staged â†’ `git restore file.txt`
  If deleted & staged â†’ `git restore --staged file.txt && git restore file.txt`
  If committed & deleted â†’ `git checkout HEAD~1 -- file.txt`
  If filename unknown â†’ `git log --stat` (to check history)

---

4. Git Stash

Save uncommitted work â†’ `git stash`
List stashes â†’ `git stash list`
Apply stash â†’ `git stash apply`
Apply specific stash â†’ `git stash apply stash@{id}`
Drop stash â†’ `git stash drop stash@{id}`
Clear all stashes â†’ `git stash clear`

---

 5. Working with Remote Repositories

Clone repo â†’ `git clone <repo-url>`
Check remotes â†’ `git remote -v`
Push to remote â†’ `git push -u origin main`
Pull changes â†’ `git pull origin main`
Fetch changes (without merge) â†’ `git fetch`

---

 6. Branching

List branches â†’ `git branch`
Create branch â†’ `git branch feature-1`
Switch branch â†’ `git checkout feature-1`
Create & switch â†’ `git checkout -b feature-1`
Rename branch â†’ `git branch -m oldName newName`
Delete branch (local) â†’ `git branch -D feature-1`
Delete branch (remote) â†’ `git push origin --delete feature-1`

---

 7. Merge & Rebase

Merge branch â†’

  ```bash
  git checkout main
  git merge feature-1
  ```
Rebase branch â†’

  ```bash
  git checkout feature-1
  git rebase main
  ```
Difference :

  Merge â†’ keeps history, shows branch commits separately.
  Rebase â†’ linear history, rewrites commits.

---

 8. Handling Merge Conflicts

Open the conflicting file â†’ Look for `<<<<<<<`, `=======`, `>>>>>>>`.
Edit to keep required code.
Mark resolved â†’ `git add file.txt`
Commit â†’ `git commit -m "Resolved conflict"`

---

 9. Git Ignore

Create `.gitignore` file and list patterns:

  ```
  *.log
  node_modules/
  .env
  ```
Prevents listed files from being tracked.

---

 10. GitHub Workflow

1. Create repo on GitHub.
2. Initialize locally â†’ `git init`
3. Add remote â†’ `git remote add origin <repo-url>`
4. Push code â†’ `git push -u origin main`

---

11. Forking

 Fork repo from one account to another.
 Clone forked repo, work, and push changes.
 Submit Pull Request (PR) to original repo.

---

 12. Useful Commands

View commit history â†’ `git log --oneline --graph --decorate`
Show last commit â†’ `git show HEAD`
Undo last commit (keep changes) â†’ `git reset --soft HEAD~1`
Undo last commit (discard changes) â†’ `git reset --hard HEAD~1`
Clean untracked files â†’ `git clean -f`

---

ðŸ‘‰ This cheat sheet covers config, workflow, stash, restore, branches, merging, rebase, conflicts, ignore, remote, GitHub & useful commands â€” all essential for quick reference.

