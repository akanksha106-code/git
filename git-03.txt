
Git Notes – Part 3
==================

1. Sending Code from Local → Remote Repository (Without Cloning)
-----------------------------------------------------------------
If you already have a project on your machine and want to push it to a new GitHub repo:

    git init                               # Initialize Git in local folder
    git add .                              # Stage all files
    git commit -m "Initial commit"         # Commit changes
    git remote add origin https://github.com/user/repo.git   # Link local → remote
    git branch -M main                     # Rename master → main
    git push -u origin main                # Push to GitHub

✔ This flow is used when starting with a local project first and then connecting it to a remote repository.


2. Can We Skip the Staging Area?
--------------------------------
❌ No, we cannot move files directly from Working Directory → Repository (commit).
✔ Files must go through the Staging Area (git add) → this ensures selective commits.

Example:

    git commit -m "msg"

➡️ Will fail if no file is staged.


3. Branches
-----------
A branch is an independent line of development.

### Create & Switch Branches

    git branch                # List local branches
    git branch feature-1      # Create branch 'feature-1'
    git checkout feature-1    # Switch to branch 'feature-1'

✔ When switching to a new branch, all existing files are copied over.


### Checking Branches

    git branch           # Local branches
    git branch -r        # Remote branches
    git branch -a        # All branches (local + remote)
    git branch -r |wc -l # Count remote branches
    git branch |wc -l    # Count local branches
    git branch -a |wc -l # Count all branches


### Rename Branch

    git branch -m oldName newName

✔ Use when you want to rename feature branches (ex: bugfix → bugfix-UI).


### Delete Branch

    git branch -D branchName

✔ Use when the branch is merged and no longer needed.


4. .gitignore
-------------
Used to ignore files/directories so Git does not track them.

Example .gitignore:

    node_modules/     # Ignore dependencies
    *.log             # Ignore all log files
    .env              # Ignore environment variables

✔ Useful to keep repo clean and avoid committing sensitive/unnecessary files.


5. Pull Request (Remote Branch Merging)
---------------------------------------
- Pull Request (PR) = propose changes from one branch → another on GitHub.
- Allows code review, discussion, and safe merging.

Flow:
1. Developer creates feature-branch.
2. Push branch to GitHub → open PR to merge into main.
3. After review → PR gets merged.

✔ Best practice for team collaboration.


6. Branch Merging (Local to Local)
----------------------------------
Merging one branch into another locally:

    git checkout main
    git merge feature-1

✔ Combines commits from feature-1 into main.
✔ Keeps full history (creates a merge commit).


7. Git Rebase
-------------
Rebase = Move commits from one branch and replay them on top of another branch.

    git checkout feature-1
    git rebase main

✔ Keeps history linear (no merge commits).

**Merge vs Rebase**
- Merge: Preserves history → shows multiple branches merging.
- Rebase: Rewrites history → looks like a single straight line.


8. Merge Conflict
-----------------
Conflict happens when 2 branches change the same line of code.

Example:

    git checkout main
    git merge feature-1

If both branches modified the same file → conflict markers appear:

<<<<<<< HEAD
code from main
=======
code from feature-1
>>>>>>> feature-1

✔ Resolve manually → keep correct code → stage → commit.

    git add conflicted_file.js
    git commit -m "Resolved merge conflict"


Summary
-------
- Always use staging area before committing.
- Use branches for parallel work (create, switch, delete, rename).
- Use .gitignore to exclude unnecessary files.
- Use PRs for remote collaboration.
- Merge = keep history, Rebase = clean history.
- Conflicts need manual resolution.
